for (j in 1:100){
clu <- readRDS(paste("data/", j, "_cluster_", setting_list[k], ".rds", sep = ""))
gene_name <- readRDS(paste("data/", j, "_name.rds", sep = ""))
for (i in 1:6){
if(i == 6){
out <- readRDS(paste("Monocle3/", j, "Monocle3_", setting_list[k], ".rds", sep = ""))
out_mat <- matrix(out[,2], byrow = T,
nrow = length(genenames), ncol = length(unique(clu)))
out_summ <- apply(out_mat[, 2:length(unique(clu))], 1, min)
detection <- gene_name[which(out_summ <= 0.05)]
} else {
res <- readRDS(paste(meth2[i], "/", j, "_", meth2[i], "_", setting_list[k], ".rds", sep = ""))
detection <- gene_name[res[res[,2] <= 0.05, 1]]
detection <- detection[!is.na(detection)]
}
tp <- sum(detection <= 120)
fp <- sum(detection > 120)
fn <- sum(gene_name <= 120) - tp
tn <- sum(gene_name > 120) - fp
res2_sen[i, (k - 1) * 100 + j] <- tp / (tp + fn)
res2_spe[i, (k - 1) * 100 + j] <- tn / (tn + fp)
res2_f1s[i, (k - 1) * 100 + j] <- 2 * tp / (2 * tp + fp + fn)
}
}
}
for (k in 1:7){
for (j in 1:100){
clu <- readRDS(paste("data/", j, "_cluster_", setting_list[k], ".rds", sep = ""))
gene_name <- readRDS(paste("data/", j, "_name.rds", sep = ""))
for (i in 1:6){
if(i == 6){
out <- readRDS(paste("Monocle3/", j, "_Monocle3_", setting_list[k], ".rds", sep = ""))
out_mat <- matrix(out[,2], byrow = T,
nrow = length(genenames), ncol = length(unique(clu)))
out_summ <- apply(out_mat[, 2:length(unique(clu))], 1, min)
detection <- gene_name[which(out_summ <= 0.05)]
} else {
res <- readRDS(paste(meth2[i], "/", j, "_", meth2[i], "_", setting_list[k], ".rds", sep = ""))
detection <- gene_name[res[res[,2] <= 0.05, 1]]
detection <- detection[!is.na(detection)]
}
tp <- sum(detection <= 120)
fp <- sum(detection > 120)
fn <- sum(gene_name <= 120) - tp
tn <- sum(gene_name > 120) - fp
res2_sen[i, (k - 1) * 100 + j] <- tp / (tp + fn)
res2_spe[i, (k - 1) * 100 + j] <- tn / (tn + fp)
res2_f1s[i, (k - 1) * 100 + j] <- 2 * tp / (2 * tp + fp + fn)
}
}
}
for (k in 1:7){
for (j in 1:100){
clu <- readRDS(paste("data/", j, "_cluster_", setting_list[k], ".rds", sep = ""))
gene_name <- readRDS(paste("data/", j, "_name.rds", sep = ""))
for (i in 1:6){
if(i == 6){
out <- readRDS(paste("Monocle3/", j, "_Monocle3_", setting_list[k], ".rds", sep = ""))
out_mat <- matrix(out[,2], byrow = T,
nrow = length(gene_name), ncol = length(unique(clu)))
out_summ <- apply(out_mat[, 2:length(unique(clu))], 1, min)
detection <- gene_name[which(out_summ <= 0.05)]
} else {
res <- readRDS(paste(meth2[i], "/", j, "_", meth2[i], "_", setting_list[k], ".rds", sep = ""))
detection <- gene_name[res[res[,2] <= 0.05, 1]]
detection <- detection[!is.na(detection)]
}
tp <- sum(detection <= 120)
fp <- sum(detection > 120)
fn <- sum(gene_name <= 120) - tp
tn <- sum(gene_name > 120) - fp
res2_sen[i, (k - 1) * 100 + j] <- tp / (tp + fn)
res2_spe[i, (k - 1) * 100 + j] <- tn / (tn + fp)
res2_f1s[i, (k - 1) * 100 + j] <- 2 * tp / (2 * tp + fp + fn)
}
}
}
View(res2_f1s)
sum(is.na(res2_f1s))
sum(is.na(res2_sen))
sum(is.na(res2_spe))
getwd()
library(Seurat)
library(mclust)
library(grid)
library(ggpubr)
library(ggplot2)
setwd("~/Desktop/SiFINeT/Result_server/")
setwd("Numerical/SD1/")
set.seed(1)
res1_sen <- data.frame(matrix(0, 4, 100))
res1_spe <- data.frame(matrix(0, 4, 100))
res1_f1s <- data.frame(matrix(0, 4, 100))
res2_sen <- data.frame(matrix(0, 6, 700))
res2_spe <- data.frame(matrix(0, 6, 700))
res2_f1s <- data.frame(matrix(0, 6, 700))
meth1 <- c("SiFINeT", "M3Drop", "scry", "singleCellHaystack")
meth2 <- c("DESeq2", "edgeR", "limma", "voom_limma", "MAST", "Monocle3")
setting_list <- c("true",
"seurat_k", "seurat_d",
"louvain_k", "louvain_d",
"cidr_k", "cidr_d")
for (j in 1:100){
gene_name <- readRDS(paste("data/", j, "_name.rds", sep = ""))
for (i in 1:4){
if(i == 1){
fset <- readRDS(paste("data/", j, "_featureset.rds", sep = ""))
detection <- unlist(fset)
} else if (i == 3){
res <- readRDS(paste(meth1[i], "/", j, "_", meth1[i], ".rds", sep = ""))
t_gene <- sum(gene_name <= 120)
ord <- order(res, decreasing = T)
detection <- gene_name[ord[1:t_gene]]
} else {
res <- readRDS(paste(meth1[i], "/", j, "_", meth1[i], ".rds", sep = ""))
detection <- gene_name[res[res[,2] <= 0.05, 1]]
}
tp <- sum(detection <= 120)
fp <- sum(detection > 120)
fn <- sum(gene_name <= 120) - tp
tn <- sum(gene_name > 120) - fp
res1_sen[i, j] <- tp / (tp + fn)
res1_spe[i, j] <- tn / (tn + fp)
res1_f1s[i, j] <- 2 * tp / (2 * tp + fp + fn)
}
}
for (k in 1:7){
for (j in 1:100){
clu <- readRDS(paste("data/", j, "_cluster_", setting_list[k], ".rds", sep = ""))
gene_name <- readRDS(paste("data/", j, "_name.rds", sep = ""))
for (i in 1:6){
if(i == 6){
out <- readRDS(paste("Monocle3/", j, "_Monocle3_", setting_list[k], ".rds", sep = ""))
out_mat <- matrix(out[,2], byrow = T,
nrow = length(gene_name), ncol = length(unique(clu)))
out_summ <- apply(out_mat[, 2:length(unique(clu))], 1, min)
detection <- gene_name[which(out_summ <= 0.05)]
} else {
res <- readRDS(paste(meth2[i], "/", j, "_", meth2[i], "_", setting_list[k], ".rds", sep = ""))
detection <- gene_name[res[res[,2] <= 0.05, 1]]
detection <- detection[!is.na(detection)]
}
tp <- sum(detection <= 120)
fp <- sum(detection > 120)
fn <- sum(gene_name <= 120) - tp
tn <- sum(gene_name > 120) - fp
res2_sen[i, (k - 1) * 100 + j] <- tp / (tp + fn)
res2_spe[i, (k - 1) * 100 + j] <- tn / (tn + fp)
res2_f1s[i, (k - 1) * 100 + j] <- 2 * tp / (2 * tp + fp + fn)
}
}
}
Method <- rep(c("SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-T", "edgeR-T", "limma-T", "limma-voom-T", "MAST-T", "Monocle3-T",
"DESeq2-Seurat-N", "edgeR-Seurat-N", "limma-Seurat-N", "limma-voom-Seurat-N", "MAST-Seurat-N", "Monocle3-Seurat-N",
"DESeq2-Louvain-N", "edgeR-Louvain-N", "limma-Louvain-N", "limma-voom-Louvain-N", "MAST-Louvain-N", "Monocle3-Louvain-N",
"DESeq2-CIDR-N", "edgeR-CIDR-N", "limma-CIDR-N", "limma-voom-CIDR-N", "MAST-CIDR-N", "Monocle3-CIDR-N",
"DESeq2-Seurat-D", "edgeR-Seurat-D", "limma-Seurat-D", "limma-voom-Seurat-D", "MAST-Seurat-D", "Monocle3-Seurat-D",
"DESeq2-Louvain-D", "edgeR-Louvain-D", "limma-Louvain-D", "limma-voom-Louvain-D", "MAST-Louvain-D", "Monocle3-Louvain-D",
"DESeq2-CIDR-D", "edgeR-CIDR-D", "limma-CIDR-D", "limma-voom-CIDR-D", "MAST-CIDR-D", "Monocle3-CIDR-D"), each = 100)
sen_value <- c(res1_sen[1, ], res1_sen[2, ], res1_sen[3, ], res1_sen[4, ],
res2_sen[1, 1:100], res2_sen[2, 1:100], res2_sen[3, 1:100], res2_sen[4, 1:100], res2_sen[5, 1:100], res2_sen[6, 1:100],
res2_sen[1, 101:200], res2_sen[2, 101:200], res2_sen[3, 101:200], res2_sen[4, 101:200], res2_sen[5, 101:200], res2_sen[6, 101:200],
res2_sen[1, 301:400], res2_sen[2, 301:400], res2_sen[3, 301:400], res2_sen[4, 301:400], res2_sen[5, 301:400], res2_sen[6, 301:400],
res2_sen[1, 501:600], res2_sen[2, 501:600], res2_sen[3, 501:600], res2_sen[4, 501:600], res2_sen[5, 501:600], res2_sen[6, 501:600],
res2_sen[1, 201:300], res2_sen[2, 201:300], res2_sen[3, 201:300], res2_sen[4, 201:300], res2_sen[5, 201:300], res2_sen[6, 201:300],
res2_sen[1, 401:500], res2_sen[2, 401:500], res2_sen[3, 401:500], res2_sen[4, 401:500], res2_sen[5, 401:500], res2_sen[6, 401:500],
res2_sen[1, 601:700], res2_sen[2, 601:700], res2_sen[3, 601:700], res2_sen[4, 601:700], res2_sen[5, 601:700], res2_sen[6, 601:700])
spe_value <- c(res1_spe[1, ], res1_spe[2, ], res1_spe[3, ], res1_spe[4, ],
res2_spe[1, 1:100], res2_spe[2, 1:100], res2_spe[3, 1:100], res2_spe[4, 1:100], res2_spe[5, 1:100], res2_spe[6, 1:100],
res2_spe[1, 101:200], res2_spe[2, 101:200], res2_spe[3, 101:200], res2_spe[4, 101:200], res2_spe[5, 101:200], res2_spe[6, 101:200],
res2_spe[1, 301:400], res2_spe[2, 301:400], res2_spe[3, 301:400], res2_spe[4, 301:400], res2_spe[5, 301:400], res2_spe[6, 301:400],
res2_spe[1, 501:600], res2_spe[2, 501:600], res2_spe[3, 501:600], res2_spe[4, 501:600], res2_spe[5, 501:600], res2_spe[6, 501:600],
res2_spe[1, 201:300], res2_spe[2, 201:300], res2_spe[3, 201:300], res2_spe[4, 201:300], res2_spe[5, 201:300], res2_spe[6, 201:300],
res2_spe[1, 401:500], res2_spe[2, 401:500], res2_spe[3, 401:500], res2_spe[4, 401:500], res2_spe[5, 401:500], res2_spe[6, 401:500],
res2_spe[1, 601:700], res2_spe[2, 601:700], res2_spe[3, 601:700], res2_spe[4, 601:700], res2_spe[5, 601:700], res2_spe[6, 601:700])
f1s_value <- c(res1_f1s[1, ], res1_f1s[2, ], res1_f1s[3, ], res1_f1s[4, ],
res2_f1s[1, 1:100], res2_f1s[2, 1:100], res2_f1s[3, 1:100], res2_f1s[4, 1:100], res2_f1s[5, 1:100], res2_f1s[6, 1:100],
res2_f1s[1, 101:200], res2_f1s[2, 101:200], res2_f1s[3, 101:200], res2_f1s[4, 101:200], res2_f1s[5, 101:200], res2_f1s[6, 101:200],
res2_f1s[1, 301:400], res2_f1s[2, 301:400], res2_f1s[3, 301:400], res2_f1s[4, 301:400], res2_f1s[5, 301:400], res2_f1s[6, 301:400],
res2_f1s[1, 501:600], res2_f1s[2, 501:600], res2_f1s[3, 501:600], res2_f1s[4, 501:600], res2_f1s[5, 501:600], res2_f1s[6, 501:600],
res2_f1s[1, 201:300], res2_f1s[2, 201:300], res2_f1s[3, 201:300], res2_f1s[4, 201:300], res2_f1s[5, 201:300], res2_f1s[6, 201:300],
res2_f1s[1, 401:500], res2_f1s[2, 401:500], res2_f1s[3, 401:500], res2_f1s[4, 401:500], res2_f1s[5, 401:500], res2_f1s[6, 401:500],
res2_f1s[1, 601:700], res2_f1s[2, 601:700], res2_f1s[3, 601:700], res2_f1s[4, 601:700], res2_f1s[5, 601:700], res2_f1s[6, 601:700])
Method_type <- rep(c("SiFINeT", "Cluster-free methods", "True cell clusters",
"Correct cluster number", "Default resolution"), c(100, 300, 600, 1800, 1800))
plotdata <- data.frame(Method, sen_value, spe_value, f1s_value, Method_type)
plotdata$Method <- factor(plotdata$Method,
levels = c("DESeq2-T", "edgeR-T", "limma-T", "limma-voom-T", "MAST-T", "Monocle3-T",
"DESeq2-Seurat-N", "edgeR-Seurat-N", "limma-Seurat-N", "limma-voom-Seurat-N", "MAST-Seurat-N", "Monocle3-Seurat-N",
"DESeq2-Louvain-N", "edgeR-Louvain-N", "limma-Louvain-N", "limma-voom-Louvain-N", "MAST-Louvain-N", "Monocle3-Louvain-N",
"DESeq2-CIDR-N", "edgeR-CIDR-N", "limma-CIDR-N", "limma-voom-CIDR-N", "MAST-CIDR-N", "Monocle3-CIDR-N",
"SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-Seurat-D", "edgeR-Seurat-D", "limma-Seurat-D", "limma-voom-Seurat-D", "MAST-Seurat-D", "Monocle3-Seurat-D",
"DESeq2-Louvain-D", "edgeR-Louvain-D", "limma-Louvain-D", "limma-voom-Louvain-D", "MAST-Louvain-D", "Monocle3-Louvain-D",
"DESeq2-CIDR-D", "edgeR-CIDR-D", "limma-CIDR-D", "limma-voom-CIDR-D", "MAST-CIDR-D", "Monocle3-CIDR-D"),
labels = c("DESeq2-OC", "edgeR-OC", "limma-OC", "limma-voom-OC", "MAST-OC", "Monocle3-OC",
"DESeq2-Seurat-ON", "edgeR-Seurat-ON", "limma-Seurat-ON", "limma-voom-Seurat-ON", "MAST-Seurat-ON", "Monocle3-Seurat-ON",
"DESeq2-Louvain-ON", "edgeR-Louvain-ON", "limma-Louvain-ON", "limma-voom-Louvain-ON", "MAST-Louvain-ON", "Monocle3-Louvain-ON",
"DESeq2-CIDR-ON", "edgeR-CIDR-ON", "limma-CIDR-ON", "limma-voom-CIDR-ON", "MAST-CIDR-ON", "Monocle3-CIDR-ON",
"SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-Seurat-TS", "edgeR-Seurat-TS", "limma-Seurat-TS", "limma-voom-Seurat-TS", "MAST-Seurat-TS", "Monocle3-Seurat-TS",
"DESeq2-Louvain-TS", "edgeR-Louvain-TS", "limma-Louvain-TS", "limma-voom-Louvain-TS", "MAST-Louvain-TS", "Monocle3-Louvain-TS",
"DESeq2-CIDR-TS", "edgeR-CIDR-TS", "limma-CIDR-TS", "limma-voom-CIDR-TS", "MAST-CIDR-TS", "Monocle3-CIDR-TS"))
plotdata$Method_type <- factor(plotdata$Method_type, levels = c("SiFINeT", "Cluster-free methods", "True cell clusters",
"Correct cluster number", "Default resolution"))
wide <- plotdata
colnames(wide) <- c("Method", "Sensitivity", "Specificity", "F1 score", "Method_type")
long <- tidyr::pivot_longer(
wide, c("Sensitivity", "Specificity", "F1 score"),
values_to = "value", names_to = "variable"
)
library(Seurat)
library(mclust)
library(grid)
library(ggpubr)
library(ggplot2)
setwd("~/Desktop/SiFINeT/Result_server/")
setwd("Numerical/SD1/")
set.seed(1)
res1_sen <- data.frame(matrix(0, 4, 100))
res1_spe <- data.frame(matrix(0, 4, 100))
res1_f1s <- data.frame(matrix(0, 4, 100))
res2_sen <- data.frame(matrix(0, 6, 700))
res2_spe <- data.frame(matrix(0, 6, 700))
res2_f1s <- data.frame(matrix(0, 6, 700))
meth1 <- c("SiFINeT", "M3Drop", "scry", "singleCellHaystack")
meth2 <- c("DESeq2", "edgeR", "limma", "voom_limma", "MAST", "Monocle3")
setting_list <- c("true",
"seurat_k", "seurat_d",
"louvain_k", "louvain_d",
"cidr_k", "cidr_d")
for (j in 1:100){
gene_name <- readRDS(paste("data/", j, "_name.rds", sep = ""))
for (i in 1:4){
if(i == 1){
fset <- readRDS(paste("data/", j, "_featureset.rds", sep = ""))
detection <- unlist(fset)
} else if (i == 3){
res <- readRDS(paste(meth1[i], "/", j, "_", meth1[i], ".rds", sep = ""))
t_gene <- sum(gene_name <= 120)
ord <- order(res, decreasing = T)
detection <- gene_name[ord[1:t_gene]]
} else {
res <- readRDS(paste(meth1[i], "/", j, "_", meth1[i], ".rds", sep = ""))
detection <- gene_name[res[res[,2] <= 0.05, 1]]
}
tp <- sum(detection <= 120)
fp <- sum(detection > 120)
fn <- sum(gene_name <= 120) - tp
tn <- sum(gene_name > 120) - fp
res1_sen[i, j] <- tp / (tp + fn)
res1_spe[i, j] <- tn / (tn + fp)
res1_f1s[i, j] <- 2 * tp / (2 * tp + fp + fn)
}
}
for (k in 1:7){
for (j in 1:100){
clu <- readRDS(paste("data/", j, "_cluster_", setting_list[k], ".rds", sep = ""))
gene_name <- readRDS(paste("data/", j, "_name.rds", sep = ""))
for (i in 1:6){
if(i == 6){
out <- readRDS(paste("Monocle3/", j, "_Monocle3_", setting_list[k], ".rds", sep = ""))
out_mat <- matrix(out[,2], byrow = T,
nrow = length(gene_name), ncol = length(unique(clu)))
out_summ <- apply(out_mat[, 2:length(unique(clu))], 1, min)
detection <- gene_name[which(out_summ <= 0.05)]
} else {
res <- readRDS(paste(meth2[i], "/", j, "_", meth2[i], "_", setting_list[k], ".rds", sep = ""))
detection <- gene_name[res[res[,2] <= 0.05, 1]]
detection <- detection[!is.na(detection)]
}
tp <- sum(detection <= 120)
fp <- sum(detection > 120)
fn <- sum(gene_name <= 120) - tp
tn <- sum(gene_name > 120) - fp
res2_sen[i, (k - 1) * 100 + j] <- tp / (tp + fn)
res2_spe[i, (k - 1) * 100 + j] <- tn / (tn + fp)
res2_f1s[i, (k - 1) * 100 + j] <- 2 * tp / (2 * tp + fp + fn)
}
}
}
Method <- rep(c("SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-T", "edgeR-T", "limma-T", "limma-voom-T", "MAST-T", "Monocle3-T",
"DESeq2-Seurat-N", "edgeR-Seurat-N", "limma-Seurat-N", "limma-voom-Seurat-N", "MAST-Seurat-N", "Monocle3-Seurat-N",
"DESeq2-Louvain-N", "edgeR-Louvain-N", "limma-Louvain-N", "limma-voom-Louvain-N", "MAST-Louvain-N", "Monocle3-Louvain-N",
"DESeq2-CIDR-N", "edgeR-CIDR-N", "limma-CIDR-N", "limma-voom-CIDR-N", "MAST-CIDR-N", "Monocle3-CIDR-N",
"DESeq2-Seurat-D", "edgeR-Seurat-D", "limma-Seurat-D", "limma-voom-Seurat-D", "MAST-Seurat-D", "Monocle3-Seurat-D",
"DESeq2-Louvain-D", "edgeR-Louvain-D", "limma-Louvain-D", "limma-voom-Louvain-D", "MAST-Louvain-D", "Monocle3-Louvain-D",
"DESeq2-CIDR-D", "edgeR-CIDR-D", "limma-CIDR-D", "limma-voom-CIDR-D", "MAST-CIDR-D", "Monocle3-CIDR-D"), each = 100)
sen_value <- c(res1_sen[1, ], res1_sen[2, ], res1_sen[3, ], res1_sen[4, ],
res2_sen[1, 1:100], res2_sen[2, 1:100], res2_sen[3, 1:100], res2_sen[4, 1:100], res2_sen[5, 1:100], res2_sen[6, 1:100],
res2_sen[1, 101:200], res2_sen[2, 101:200], res2_sen[3, 101:200], res2_sen[4, 101:200], res2_sen[5, 101:200], res2_sen[6, 101:200],
res2_sen[1, 301:400], res2_sen[2, 301:400], res2_sen[3, 301:400], res2_sen[4, 301:400], res2_sen[5, 301:400], res2_sen[6, 301:400],
res2_sen[1, 501:600], res2_sen[2, 501:600], res2_sen[3, 501:600], res2_sen[4, 501:600], res2_sen[5, 501:600], res2_sen[6, 501:600],
res2_sen[1, 201:300], res2_sen[2, 201:300], res2_sen[3, 201:300], res2_sen[4, 201:300], res2_sen[5, 201:300], res2_sen[6, 201:300],
res2_sen[1, 401:500], res2_sen[2, 401:500], res2_sen[3, 401:500], res2_sen[4, 401:500], res2_sen[5, 401:500], res2_sen[6, 401:500],
res2_sen[1, 601:700], res2_sen[2, 601:700], res2_sen[3, 601:700], res2_sen[4, 601:700], res2_sen[5, 601:700], res2_sen[6, 601:700])
spe_value <- c(res1_spe[1, ], res1_spe[2, ], res1_spe[3, ], res1_spe[4, ],
res2_spe[1, 1:100], res2_spe[2, 1:100], res2_spe[3, 1:100], res2_spe[4, 1:100], res2_spe[5, 1:100], res2_spe[6, 1:100],
res2_spe[1, 101:200], res2_spe[2, 101:200], res2_spe[3, 101:200], res2_spe[4, 101:200], res2_spe[5, 101:200], res2_spe[6, 101:200],
res2_spe[1, 301:400], res2_spe[2, 301:400], res2_spe[3, 301:400], res2_spe[4, 301:400], res2_spe[5, 301:400], res2_spe[6, 301:400],
res2_spe[1, 501:600], res2_spe[2, 501:600], res2_spe[3, 501:600], res2_spe[4, 501:600], res2_spe[5, 501:600], res2_spe[6, 501:600],
res2_spe[1, 201:300], res2_spe[2, 201:300], res2_spe[3, 201:300], res2_spe[4, 201:300], res2_spe[5, 201:300], res2_spe[6, 201:300],
res2_spe[1, 401:500], res2_spe[2, 401:500], res2_spe[3, 401:500], res2_spe[4, 401:500], res2_spe[5, 401:500], res2_spe[6, 401:500],
res2_spe[1, 601:700], res2_spe[2, 601:700], res2_spe[3, 601:700], res2_spe[4, 601:700], res2_spe[5, 601:700], res2_spe[6, 601:700])
f1s_value <- c(res1_f1s[1, ], res1_f1s[2, ], res1_f1s[3, ], res1_f1s[4, ],
res2_f1s[1, 1:100], res2_f1s[2, 1:100], res2_f1s[3, 1:100], res2_f1s[4, 1:100], res2_f1s[5, 1:100], res2_f1s[6, 1:100],
res2_f1s[1, 101:200], res2_f1s[2, 101:200], res2_f1s[3, 101:200], res2_f1s[4, 101:200], res2_f1s[5, 101:200], res2_f1s[6, 101:200],
res2_f1s[1, 301:400], res2_f1s[2, 301:400], res2_f1s[3, 301:400], res2_f1s[4, 301:400], res2_f1s[5, 301:400], res2_f1s[6, 301:400],
res2_f1s[1, 501:600], res2_f1s[2, 501:600], res2_f1s[3, 501:600], res2_f1s[4, 501:600], res2_f1s[5, 501:600], res2_f1s[6, 501:600],
res2_f1s[1, 201:300], res2_f1s[2, 201:300], res2_f1s[3, 201:300], res2_f1s[4, 201:300], res2_f1s[5, 201:300], res2_f1s[6, 201:300],
res2_f1s[1, 401:500], res2_f1s[2, 401:500], res2_f1s[3, 401:500], res2_f1s[4, 401:500], res2_f1s[5, 401:500], res2_f1s[6, 401:500],
res2_f1s[1, 601:700], res2_f1s[2, 601:700], res2_f1s[3, 601:700], res2_f1s[4, 601:700], res2_f1s[5, 601:700], res2_f1s[6, 601:700])
Method_type <- rep(c("SiFINeT", "Cluster-free methods", "True cell clusters",
"Correct cluster number", "Default resolution"), c(100, 300, 600, 1800, 1800))
plotdata <- data.frame(Method, sen_value, spe_value, f1s_value, Method_type)
plotdata$Method <- factor(plotdata$Method,
levels = c("DESeq2-T", "edgeR-T", "limma-T", "limma-voom-T", "MAST-T", "Monocle3-T",
"DESeq2-Seurat-N", "edgeR-Seurat-N", "limma-Seurat-N", "limma-voom-Seurat-N", "MAST-Seurat-N", "Monocle3-Seurat-N",
"DESeq2-Louvain-N", "edgeR-Louvain-N", "limma-Louvain-N", "limma-voom-Louvain-N", "MAST-Louvain-N", "Monocle3-Louvain-N",
"DESeq2-CIDR-N", "edgeR-CIDR-N", "limma-CIDR-N", "limma-voom-CIDR-N", "MAST-CIDR-N", "Monocle3-CIDR-N",
"SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-Seurat-D", "edgeR-Seurat-D", "limma-Seurat-D", "limma-voom-Seurat-D", "MAST-Seurat-D", "Monocle3-Seurat-D",
"DESeq2-Louvain-D", "edgeR-Louvain-D", "limma-Louvain-D", "limma-voom-Louvain-D", "MAST-Louvain-D", "Monocle3-Louvain-D",
"DESeq2-CIDR-D", "edgeR-CIDR-D", "limma-CIDR-D", "limma-voom-CIDR-D", "MAST-CIDR-D", "Monocle3-CIDR-D"),
labels = c("DESeq2-OC", "edgeR-OC", "limma-OC", "limma-voom-OC", "MAST-OC", "Monocle3-OC",
"DESeq2-Seurat-ON", "edgeR-Seurat-ON", "limma-Seurat-ON", "limma-voom-Seurat-ON", "MAST-Seurat-ON", "Monocle3-Seurat-ON",
"DESeq2-Louvain-ON", "edgeR-Louvain-ON", "limma-Louvain-ON", "limma-voom-Louvain-ON", "MAST-Louvain-ON", "Monocle3-Louvain-ON",
"DESeq2-CIDR-ON", "edgeR-CIDR-ON", "limma-CIDR-ON", "limma-voom-CIDR-ON", "MAST-CIDR-ON", "Monocle3-CIDR-ON",
"SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-Seurat-TS", "edgeR-Seurat-TS", "limma-Seurat-TS", "limma-voom-Seurat-TS", "MAST-Seurat-TS", "Monocle3-Seurat-TS",
"DESeq2-Louvain-TS", "edgeR-Louvain-TS", "limma-Louvain-TS", "limma-voom-Louvain-TS", "MAST-Louvain-TS", "Monocle3-Louvain-TS",
"DESeq2-CIDR-TS", "edgeR-CIDR-TS", "limma-CIDR-TS", "limma-voom-CIDR-TS", "MAST-CIDR-TS", "Monocle3-CIDR-TS"))
plotdata$Method_type <- factor(plotdata$Method_type, levels = c("SiFINeT", "Cluster-free methods", "True cell clusters",
"Correct cluster number", "Default resolution"))
library(Seurat)
library(mclust)
library(grid)
library(ggpubr)
library(ggplot2)
setwd("~/Desktop/SiFINeT/Result_server/")
setwd("Numerical/SD1/")
set.seed(1)
res1_sen <- matrix(0, 4, 100)
res1_spe <- matrix(0, 4, 100)
res1_f1s <- matrix(0, 4, 100)
res2_sen <- matrix(0, 6, 700)
res2_spe <- matrix(0, 6, 700)
res2_f1s <- matrix(0, 6, 700)
meth1 <- c("SiFINeT", "M3Drop", "scry", "singleCellHaystack")
meth2 <- c("DESeq2", "edgeR", "limma", "voom_limma", "MAST", "Monocle3")
setting_list <- c("true",
"seurat_k", "seurat_d",
"louvain_k", "louvain_d",
"cidr_k", "cidr_d")
for (j in 1:100){
gene_name <- readRDS(paste("data/", j, "_name.rds", sep = ""))
for (i in 1:4){
if(i == 1){
fset <- readRDS(paste("data/", j, "_featureset.rds", sep = ""))
detection <- unlist(fset)
} else if (i == 3){
res <- readRDS(paste(meth1[i], "/", j, "_", meth1[i], ".rds", sep = ""))
t_gene <- sum(gene_name <= 120)
ord <- order(res, decreasing = T)
detection <- gene_name[ord[1:t_gene]]
} else {
res <- readRDS(paste(meth1[i], "/", j, "_", meth1[i], ".rds", sep = ""))
detection <- gene_name[res[res[,2] <= 0.05, 1]]
}
tp <- sum(detection <= 120)
fp <- sum(detection > 120)
fn <- sum(gene_name <= 120) - tp
tn <- sum(gene_name > 120) - fp
res1_sen[i, j] <- tp / (tp + fn)
res1_spe[i, j] <- tn / (tn + fp)
res1_f1s[i, j] <- 2 * tp / (2 * tp + fp + fn)
}
}
for (k in 1:7){
for (j in 1:100){
clu <- readRDS(paste("data/", j, "_cluster_", setting_list[k], ".rds", sep = ""))
gene_name <- readRDS(paste("data/", j, "_name.rds", sep = ""))
for (i in 1:6){
if(i == 6){
out <- readRDS(paste("Monocle3/", j, "_Monocle3_", setting_list[k], ".rds", sep = ""))
out_mat <- matrix(out[,2], byrow = T,
nrow = length(gene_name), ncol = length(unique(clu)))
out_summ <- apply(out_mat[, 2:length(unique(clu))], 1, min)
detection <- gene_name[which(out_summ <= 0.05)]
} else {
res <- readRDS(paste(meth2[i], "/", j, "_", meth2[i], "_", setting_list[k], ".rds", sep = ""))
detection <- gene_name[res[res[,2] <= 0.05, 1]]
detection <- detection[!is.na(detection)]
}
tp <- sum(detection <= 120)
fp <- sum(detection > 120)
fn <- sum(gene_name <= 120) - tp
tn <- sum(gene_name > 120) - fp
res2_sen[i, (k - 1) * 100 + j] <- tp / (tp + fn)
res2_spe[i, (k - 1) * 100 + j] <- tn / (tn + fp)
res2_f1s[i, (k - 1) * 100 + j] <- 2 * tp / (2 * tp + fp + fn)
}
}
}
Method <- rep(c("SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-T", "edgeR-T", "limma-T", "limma-voom-T", "MAST-T", "Monocle3-T",
"DESeq2-Seurat-N", "edgeR-Seurat-N", "limma-Seurat-N", "limma-voom-Seurat-N", "MAST-Seurat-N", "Monocle3-Seurat-N",
"DESeq2-Louvain-N", "edgeR-Louvain-N", "limma-Louvain-N", "limma-voom-Louvain-N", "MAST-Louvain-N", "Monocle3-Louvain-N",
"DESeq2-CIDR-N", "edgeR-CIDR-N", "limma-CIDR-N", "limma-voom-CIDR-N", "MAST-CIDR-N", "Monocle3-CIDR-N",
"DESeq2-Seurat-D", "edgeR-Seurat-D", "limma-Seurat-D", "limma-voom-Seurat-D", "MAST-Seurat-D", "Monocle3-Seurat-D",
"DESeq2-Louvain-D", "edgeR-Louvain-D", "limma-Louvain-D", "limma-voom-Louvain-D", "MAST-Louvain-D", "Monocle3-Louvain-D",
"DESeq2-CIDR-D", "edgeR-CIDR-D", "limma-CIDR-D", "limma-voom-CIDR-D", "MAST-CIDR-D", "Monocle3-CIDR-D"), each = 100)
sen_value <- c(res1_sen[1, ], res1_sen[2, ], res1_sen[3, ], res1_sen[4, ],
res2_sen[1, 1:100], res2_sen[2, 1:100], res2_sen[3, 1:100], res2_sen[4, 1:100], res2_sen[5, 1:100], res2_sen[6, 1:100],
res2_sen[1, 101:200], res2_sen[2, 101:200], res2_sen[3, 101:200], res2_sen[4, 101:200], res2_sen[5, 101:200], res2_sen[6, 101:200],
res2_sen[1, 301:400], res2_sen[2, 301:400], res2_sen[3, 301:400], res2_sen[4, 301:400], res2_sen[5, 301:400], res2_sen[6, 301:400],
res2_sen[1, 501:600], res2_sen[2, 501:600], res2_sen[3, 501:600], res2_sen[4, 501:600], res2_sen[5, 501:600], res2_sen[6, 501:600],
res2_sen[1, 201:300], res2_sen[2, 201:300], res2_sen[3, 201:300], res2_sen[4, 201:300], res2_sen[5, 201:300], res2_sen[6, 201:300],
res2_sen[1, 401:500], res2_sen[2, 401:500], res2_sen[3, 401:500], res2_sen[4, 401:500], res2_sen[5, 401:500], res2_sen[6, 401:500],
res2_sen[1, 601:700], res2_sen[2, 601:700], res2_sen[3, 601:700], res2_sen[4, 601:700], res2_sen[5, 601:700], res2_sen[6, 601:700])
spe_value <- c(res1_spe[1, ], res1_spe[2, ], res1_spe[3, ], res1_spe[4, ],
res2_spe[1, 1:100], res2_spe[2, 1:100], res2_spe[3, 1:100], res2_spe[4, 1:100], res2_spe[5, 1:100], res2_spe[6, 1:100],
res2_spe[1, 101:200], res2_spe[2, 101:200], res2_spe[3, 101:200], res2_spe[4, 101:200], res2_spe[5, 101:200], res2_spe[6, 101:200],
res2_spe[1, 301:400], res2_spe[2, 301:400], res2_spe[3, 301:400], res2_spe[4, 301:400], res2_spe[5, 301:400], res2_spe[6, 301:400],
res2_spe[1, 501:600], res2_spe[2, 501:600], res2_spe[3, 501:600], res2_spe[4, 501:600], res2_spe[5, 501:600], res2_spe[6, 501:600],
res2_spe[1, 201:300], res2_spe[2, 201:300], res2_spe[3, 201:300], res2_spe[4, 201:300], res2_spe[5, 201:300], res2_spe[6, 201:300],
res2_spe[1, 401:500], res2_spe[2, 401:500], res2_spe[3, 401:500], res2_spe[4, 401:500], res2_spe[5, 401:500], res2_spe[6, 401:500],
res2_spe[1, 601:700], res2_spe[2, 601:700], res2_spe[3, 601:700], res2_spe[4, 601:700], res2_spe[5, 601:700], res2_spe[6, 601:700])
f1s_value <- c(res1_f1s[1, ], res1_f1s[2, ], res1_f1s[3, ], res1_f1s[4, ],
res2_f1s[1, 1:100], res2_f1s[2, 1:100], res2_f1s[3, 1:100], res2_f1s[4, 1:100], res2_f1s[5, 1:100], res2_f1s[6, 1:100],
res2_f1s[1, 101:200], res2_f1s[2, 101:200], res2_f1s[3, 101:200], res2_f1s[4, 101:200], res2_f1s[5, 101:200], res2_f1s[6, 101:200],
res2_f1s[1, 301:400], res2_f1s[2, 301:400], res2_f1s[3, 301:400], res2_f1s[4, 301:400], res2_f1s[5, 301:400], res2_f1s[6, 301:400],
res2_f1s[1, 501:600], res2_f1s[2, 501:600], res2_f1s[3, 501:600], res2_f1s[4, 501:600], res2_f1s[5, 501:600], res2_f1s[6, 501:600],
res2_f1s[1, 201:300], res2_f1s[2, 201:300], res2_f1s[3, 201:300], res2_f1s[4, 201:300], res2_f1s[5, 201:300], res2_f1s[6, 201:300],
res2_f1s[1, 401:500], res2_f1s[2, 401:500], res2_f1s[3, 401:500], res2_f1s[4, 401:500], res2_f1s[5, 401:500], res2_f1s[6, 401:500],
res2_f1s[1, 601:700], res2_f1s[2, 601:700], res2_f1s[3, 601:700], res2_f1s[4, 601:700], res2_f1s[5, 601:700], res2_f1s[6, 601:700])
Method_type <- rep(c("SiFINeT", "Cluster-free methods", "True cell clusters",
"Correct cluster number", "Default resolution"), c(100, 300, 600, 1800, 1800))
plotdata <- data.frame(Method, sen_value, spe_value, f1s_value, Method_type)
plotdata$Method <- factor(plotdata$Method,
levels = c("DESeq2-T", "edgeR-T", "limma-T", "limma-voom-T", "MAST-T", "Monocle3-T",
"DESeq2-Seurat-N", "edgeR-Seurat-N", "limma-Seurat-N", "limma-voom-Seurat-N", "MAST-Seurat-N", "Monocle3-Seurat-N",
"DESeq2-Louvain-N", "edgeR-Louvain-N", "limma-Louvain-N", "limma-voom-Louvain-N", "MAST-Louvain-N", "Monocle3-Louvain-N",
"DESeq2-CIDR-N", "edgeR-CIDR-N", "limma-CIDR-N", "limma-voom-CIDR-N", "MAST-CIDR-N", "Monocle3-CIDR-N",
"SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-Seurat-D", "edgeR-Seurat-D", "limma-Seurat-D", "limma-voom-Seurat-D", "MAST-Seurat-D", "Monocle3-Seurat-D",
"DESeq2-Louvain-D", "edgeR-Louvain-D", "limma-Louvain-D", "limma-voom-Louvain-D", "MAST-Louvain-D", "Monocle3-Louvain-D",
"DESeq2-CIDR-D", "edgeR-CIDR-D", "limma-CIDR-D", "limma-voom-CIDR-D", "MAST-CIDR-D", "Monocle3-CIDR-D"),
labels = c("DESeq2-OC", "edgeR-OC", "limma-OC", "limma-voom-OC", "MAST-OC", "Monocle3-OC",
"DESeq2-Seurat-ON", "edgeR-Seurat-ON", "limma-Seurat-ON", "limma-voom-Seurat-ON", "MAST-Seurat-ON", "Monocle3-Seurat-ON",
"DESeq2-Louvain-ON", "edgeR-Louvain-ON", "limma-Louvain-ON", "limma-voom-Louvain-ON", "MAST-Louvain-ON", "Monocle3-Louvain-ON",
"DESeq2-CIDR-ON", "edgeR-CIDR-ON", "limma-CIDR-ON", "limma-voom-CIDR-ON", "MAST-CIDR-ON", "Monocle3-CIDR-ON",
"SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-Seurat-TS", "edgeR-Seurat-TS", "limma-Seurat-TS", "limma-voom-Seurat-TS", "MAST-Seurat-TS", "Monocle3-Seurat-TS",
"DESeq2-Louvain-TS", "edgeR-Louvain-TS", "limma-Louvain-TS", "limma-voom-Louvain-TS", "MAST-Louvain-TS", "Monocle3-Louvain-TS",
"DESeq2-CIDR-TS", "edgeR-CIDR-TS", "limma-CIDR-TS", "limma-voom-CIDR-TS", "MAST-CIDR-TS", "Monocle3-CIDR-TS"))
plotdata$Method_type <- factor(plotdata$Method_type, levels = c("SiFINeT", "Cluster-free methods", "True cell clusters",
"Correct cluster number", "Default resolution"))
wide <- plotdata
colnames(wide) <- c("Method", "Sensitivity", "Specificity", "F1 score", "Method_type")
long <- tidyr::pivot_longer(
wide, c("Sensitivity", "Specificity", "F1 score"),
values_to = "value", names_to = "variable"
)
long$variable <- factor(long$variable, levels = c("Sensitivity", "Specificity", "F1 score"))
a <- ifelse(c("DESeq2-OC", "edgeR-OC", "limma-OC", "limma-voom-OC", "MAST-OC", "Monocle3-OC",
"DESeq2-Seurat-ON", "edgeR-Seurat-ON", "limma-Seurat-ON", "limma-voom-Seurat-ON", "MAST-Seurat-ON", "Monocle3-Seurat-ON",
"DESeq2-Louvain-ON", "edgeR-Louvain-ON", "limma-Louvain-ON", "limma-voom-Louvain-ON", "MAST-Louvain-ON", "Monocle3-Louvain-ON",
"DESeq2-CIDR-ON", "edgeR-CIDR-ON", "limma-CIDR-ON", "limma-voom-CIDR-ON", "MAST-CIDR-ON", "Monocle3-CIDR-ON",
"SiFINeT", "M3Drop", "scry", "singleCellHaystack",
"DESeq2-Seurat-TS", "edgeR-Seurat-TS", "limma-Seurat-TS", "limma-voom-Seurat-TS", "MAST-Seurat-TS", "Monocle3-Seurat-TS",
"DESeq2-Louvain-TS", "edgeR-Louvain-TS", "limma-Louvain-TS", "limma-voom-Louvain-TS", "MAST-Louvain-TS", "Monocle3-Louvain-TS",
"DESeq2-CIDR-TS", "edgeR-CIDR-TS", "limma-CIDR-TS", "limma-voom-CIDR-TS", "MAST-CIDR-TS", "Monocle3-CIDR-TS") == "SiFINeT", "red", "black")
p4 <- ggplot(long, aes(x=Method, y=value, fill=Method_type)) +
facet_wrap(~ variable) +
geom_boxplot() + # geom_dotplot(binaxis='y', stackdir='center', dotsize=0.2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank()) +
theme(axis.text=element_text(size=10,face="bold"),
axis.text.y=element_text(color=rev(a)),
axis.title=element_text(size=12,face="bold")) +
geom_vline(aes(xintercept=18.5), colour="#990000")+
geom_vline(aes(xintercept=21.5), colour="#990000") +
geom_vline(aes(xintercept=22.5), colour="#990000") +
geom_vline(aes(xintercept=40.5), colour="#990000") +
theme(legend.position = "none") + coord_flip() +
scale_x_discrete(limits=rev)
p4
jpeg("../../Supp_Fig5.jpeg", width = 8, height = 8, units = "in", res = 300)
p4 + theme(plot.margin = unit(c(0, 0.15, 0, 0), "npc"))
grid.text(unit(0.86, "npc"), unit(0.47, "npc"),
label=expression(paste('SiFINeT'),'type=4'),
hjust = 0, vjust=0, gp=gpar(fontsize=7, fontface = "bold"))
grid.text(unit(0.86, "npc"), unit(0.42, "npc"),
label=expression(paste('Cluster-independent\napproach'),'type=4'),
hjust = 0, vjust=0, gp=gpar(fontsize=7, fontface = "bold"))
grid.text(unit(0.86, "npc"), unit(0.9, "npc"),
label=expression(paste('Cluster-based methods\nOracle cluster'),'type=4'),
hjust = 0, vjust=0, gp=gpar(fontsize=7, fontface = "bold"))
grid.text(unit(0.86, "npc"), unit(0.68, "npc"),
label=expression(paste('Cluster-based methods\nOracle cluster number'),'type=4'),
hjust = 0, vjust=0, gp=gpar(fontsize=7, fontface = "bold"))
grid.text(unit(0.86, "npc"), unit(0.23, "npc"),
label=expression(paste('Cluster-based methods\nTwo step'),'type=4'),
hjust = 0, vjust=0, gp=gpar(fontsize=7, fontface = "bold"))
dev.off()

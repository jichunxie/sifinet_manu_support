setwd("~/Desktop/SiFINeT/Result_server/Experimental/Monoclonal")
library(Seurat)
library(Matrix)
data <- readRDS("matrix.rds")
colnames(data) <- 1:ncol(data)
rownames(data) <- 1:nrow(data)
so <- CreateSeuratObject(data)
so <- SCTransform(so, return.only.var.genes = FALSE)
so <- FindVariableFeatures(so, selection.method = "vst", nfeatures = 500)
all.genes <- rownames(so)
so <- ScaleData(so, features = all.genes)
so <- ScaleData(so, features = all.genes)
data <- readRDS("matrix.rds")
colnames(data) <- 1:ncol(data)
rownames(data) <- 1:nrow(data)
so <- CreateSeuratObject(data)
so <- SCTransform(so, return.only.var.genes = FALSE)
so <- FindVariableFeatures(so, selection.method = "vst", nfeatures = 500)
all.genes <- rownames(so)
so <- RunPCA(so, features = VariableFeatures(object = so))
so <- FindNeighbors(so, dims = 1:50)
so <- FindClusters(so)
group <- factor(as.numeric(so$seurat_clusters))
clus <- readRDS("cluster.rds")
head(clus)
head(group)
library(mclust)
adjustedRandIndex(clus, group)
data <- readRDS("matrix.rds")
colnames(data) <- 1:ncol(data)
rownames(data) <- 1:nrow(data)
so <- CreateSeuratObject(data)
so <- SCTransform(so, return.only.var.genes = FALSE)
so <- RunPCA(so, features = VariableFeatures(object = so))
so <- FindNeighbors(so, dims = 1:50)
so <- FindClusters(so)
group <- factor(as.numeric(so$seurat_clusters))
adjustedRandIndex(clus, group)
dim(so@assays$SCT@data)
so$seurat_clusters
so <- CreateSeuratObject(data)
so <- SCTransform(so, return.only.var.genes = FALSE)
so <- RunPCA(so)
so <- FindNeighbors(so, dims = 1:50)
so <- FindClusters(so)
group <- factor(as.numeric(so$seurat_clusters))
adjustedRandIndex(clus, group)
library(cidr)
example("cidr")
sData@nData
dim(sData@nData)
scDataConstructor
setwd("~/Desktop/SiFINeT/Result/Experimental/IPF")
library(GSVA)
library(Seurat)
library(readxl)
gene_list <- list()
data <- readRDS("1_matrix.rds")
genename <- readRDS("1_genename.rds")
rownames(data) <- genename
colnames(data) <- 1:ncol(data)
so <- CreateSeuratObject(data)
so <- SCTransform(so, return.only.var.genes = FALSE)
Y <- so@assays$SCT@data
gene_list <- list()
data <- readRDS("1_matrix.rds")
genename <- readRDS("1_genename.rds")
rownames(data) <- genename
colnames(data) <- 1:ncol(data)
so <- CreateSeuratObject(data)
so <- SCTransform(so, return.only.var.genes = FALSE)
Y <- so@assays$SCT@data
SenMayo <- read_excel("41467_2022_32552_MOESM4_ESM.xlsx")
geneset <- SenMayo$`Gene(human)`
so <- readRDS("so.rds")
sifiset <- tolower(unique(unlist(so@featureset)))
geneset1 <- setdiff(tolower(geneset), sifiset)
temp <- match(tolower(geneset1), tolower(genename))
gene_list[[1]] <- temp[!is.na(temp)]
setwd("~/Desktop/SiFINeT/Result/Numerical/SD2")
setwd("~/Desktop/SiFINeT/Result_server_2/Numerical/SD2")
so <- readRDS("so.rds")
coexp <- so@coexp
rm(so)
a <- c(coexp[1:60, 1:60][upper.tri(coexp[1:60, 1:60])],
coexp[41:100, 41:100][upper.tri(coexp[41:100, 41:100])],
coexp[81:140, 81:140][upper.tri(coexp[81:140, 81:140])],
coexp[121:180, 121:180][upper.tri(coexp[121:180, 121:180])],
coexp[161:220, 161:220][upper.tri(coexp[161:220, 161:220])])
b <- c(coexp[1:40, 61:80], coexp[1:40, 101:120], coexp[1:40, 141:160], coexp[1:40, 181:200],
coexp[61:80, 101:120], coexp[61:80, 141:160], coexp[61:80, 181:200],
coexp[101:120, 141:160], coexp[101:120, 181:200], , coexp[141:160, 181:200])
b <- c(coexp[1:40, 61:80], coexp[1:40, 101:120], coexp[1:40, 141:160], coexp[1:40, 181:200],
coexp[61:80, 101:120], coexp[61:80, 141:160], coexp[61:80, 181:200],
coexp[101:120, 141:160], coexp[101:120, 181:200], coexp[141:160, 181:200])
d <- c(coexp[1:220, 221:ncol(coexp)])
d <- c(coexp[1:220, 221:ncol(coexp)])
e <- c(coexp[221:ncol(coexp), 221:ncol(coexp)][upper.tri(coexp[221:ncol(coexp), 221:ncol(coexp)])])
plot(density(a), xlim = c(-15, 15), ylim = c(0, 0.4), col = "red", main = "Density of coexpression pattern", xlab = "Coexpression pattern", lwd = 5)
lines(density(b), col = "blue", lwd = 5)
lines(density(d), col = "black", lwd = 5)
lines(density(e), col = "yellow", lwd = 5)
lines(density(b), col = "blue", lwd = 5, alpha = 0.5)
haha <- density(a)
plot(density(a)ï¼‰
plot(density(a))
plot(density(b))
plot(haha$x, haha$y)
da <- density(a)
db <- density(b)
dd <- density(d)
de <- density(e)
plotx <- c(da$x, db$x, dd$x, de$x)
ploty <- c(da$y, db$y, dd$y, de$y)
label <- rep(c("Same", "Different", "One", "None"),
c(length(da$x), length(db$x), length(dd$x), length(de$x)))
plotdata <- data.frame(plotx, ploty, label)
refx <- seq(-5, 5, length.out = length(de$x))
refy <- dnorm(refx)
plotx <- c(da$x, db$x, dd$x, de$x, refx)
ploty <- c(da$y, db$y, dd$y, de$y, refy)
label <- rep(c("Same", "Different", "One", "None", "Reference"),
c(length(da$x), length(db$x), length(dd$x), length(de$x), length(de$x)))
plotdata <- data.frame(plotx, ploty, label)
ggplot(plotdata, aes(plotx, ploty), color = label) +
geom_point() + geom_smooth(method = lm)
library(ggplot2)
ggplot(plotdata, aes(plotx, ploty), color = label) +
geom_point() + geom_smooth(method = lm)
ggplot(plotdata, aes(plotx, ploty), fill = label) +
geom_point() + geom_smooth(method = lm)
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_point() + geom_smooth(method = lm)
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line()
label <- factor(label, levels = c("Same", "Different", "One", "None", "Reference"))
plotdata <- data.frame(plotx, ploty, label)
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line()
legend(7, 0.35, legend=c("Same", "Different", "One", "None"),
col=c("red", "blue", "green", "yellow"), lty=1, cex=0.8, lwd = 5)
plotdata <- plotdata[abs(plotdata$plotx) <= 10]
plotdata <- plotdata[abs(plotdata$plotx) <= 10, ]
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line()
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line() + theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank()) +
theme(axis.text=element_text(size=10,face="bold"),
axis.text.y=element_text(color=rev(a)),
axis.title=element_text(size=12,face="bold"))
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line() + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank()) +
theme(axis.text=element_text(size=10,face="bold"),
axis.text.y=element_text(color=rev(a)),
axis.title=element_text(size=12,face="bold"))
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line() + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank())
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line() + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.title=element_blank())
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line() + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.title=element_blank()) +
label(x = "Coexpression", y = "Density")
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line() + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density")
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line() + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density")
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line() + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density") +
guides(fill=guide_legend(title="Coexpression type"))
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line(size = 2) + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density") +
guides(fill=guide_legend(title="Coexpression type"))
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line(size = 2, alpha = 0.5) + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density") +
guides(fill=guide_legend(title="Coexpression type"))
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line(size = 2, alpha = 0.5) + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density") +
scale_fill_manual(=c("yellow", "green", "red", "blue", "gray")) +
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line(size = 2, alpha = 0.5) + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density") +
scale_fill_manual(c("yellow", "green", "red", "blue", "gray")) +
guides(fill=guide_legend(title="Coexpression type"))
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line(size = 2, alpha = 0.5) + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density") +
scale_color_manual(c("yellow", "green", "red", "blue", "gray")) +
guides(fill=guide_legend(title="Coexpression type"))
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line(size = 2, alpha = 0.5) + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density") +
scale_color_manual(values = c("yellow", "green", "red", "blue", "gray")) +
guides(fill=guide_legend(title="Coexpression type"))
library(Seurat)
library(ggplot2)
library(ggpubr)
library(mclust)
library(tidyverse)
setwd("~/Desktop/SiFINeT/Result_server/")
# Supp Fig 1
setwd("Numerical/SD1/")
data <- readRDS("data/19_matrix.rds")
group1 <- readRDS("data/19_cluster_true.rds")
group2 <- readRDS("data/19_cluster_seurat_k.rds")
group3 <- readRDS("data/19_cluster_seurat_d.rds")
colnames(data) <- 1:ncol(data)
rownames(data) <- 1:nrow(data)
so <- CreateSeuratObject(data)
so <- NormalizeData(so)
so <- FindVariableFeatures(so, selection.method = "vst", nfeatures = 500)
all.genes <- rownames(so)
so <- ScaleData(so, features = all.genes)
so <- RunPCA(so, features = VariableFeatures(object = so))
so <- FindNeighbors(so, dims = 1:10)
so <- FindClusters(so)
so <- RunUMAP(so, dims = 1:10)
so <- AddMetaData(so, data.frame(group1, group2, group3))
g1 <- DimPlot(so, reduction = "umap", group.by = "group1") +
labs(title = NULL) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
g2 <- DimPlot(so, reduction = "umap", group.by = "group2") +
labs(title = NULL) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
g3 <- DimPlot(so, reduction = "umap", group.by = "group3") +
labs(title = NULL) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
ggarrange(g1, g2, g3, nrow = 1, labels = "auto")
ggsave("../../Supp_Fig1.jpeg", width = 8, height = 2.5,
units = "in", device='jpeg', dpi=600)
# Supp Fig 2
# In plot2
# Supp Fig 3
# In plot3
# Supp Fig 4
setwd("../../Experimental/BoneMarrow")
set.seed(1)
selected_gene <- c("Gata2")
data <- readRDS("matrix.rds")
color <- data[match(selected_gene, rownames(data)), ]
gsvares <- readRDS("gsva_res.rds")
gsvares <- rbind(gsvares[2,], gsvares[1,])
plotdata1 <- data.frame(cbind(t(gsvares), color))
colnames(plotdata1) <- c("GSVA_layer1_GS1", "GSVA_layer1_GS2", "Expression")
g1 <- ggplot() +
geom_point(data = plotdata1, aes(x = GSVA_layer1_GS1, y = GSVA_layer1_GS2, color = Expression), size = 0.01) +
scale_colour_gradient2(low="navy", mid="white", high="red", midpoint = -0.2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black"),
legend.text=element_text(size=10,face="bold"),
legend.title=element_text(size=10,face="bold"))
g3 <- g1  +
annotate(geom = "segment", x = 0, xend = -0.65, y = -0.65, yend = -0.65) +
annotate(geom = "segment", x = 0, xend = -0.65, y = 0, yend = 0) +
annotate(geom = "segment", x = 0, xend = 0, y = 0, yend = -0.65) +
annotate(geom = "segment", x = -0.65, xend = -0.65, y = 0, yend = -0.65)
g3
ggsave("../../Supp_Fig4.jpeg", width = 3, height = 2.5,
units = "in", device='jpeg', dpi=600)
# Supp Fig 5
setwd("../MassiveRNA/")
timeres <- read.table("time_res.txt")
timeres <- timeres[, 3]
memres <- read.table("mem_res.txt")
memres <- memres[,2]
time_mem_data <- data.frame(ncell = c(10000, 20000, 50000, 100000, 200000, 400000,
600000, 800000, 1000000, 1287071),
total_time = timeres, peak_memory = memres)
time_mem_data$log_ncell <- log10(time_mem_data$ncell)
time_mem_data$log_total_time <- log10(time_mem_data$total_time)
time_mem_data$log_peak_memory <- log10(time_mem_data$peak_memory)
p1 <- ggplot(time_mem_data, aes(log_ncell, log_total_time)) +
geom_point(size = 3) +
geom_smooth(method="lm") +
labs(x = "log10 number of cells", y = "log10 time cost (s)") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black"),
legend.text=element_text(face="bold"),
legend.title=element_blank()) +
annotate("text",x=4.5,y=4.5,label=(paste("Slope =",round(coef(lm(time_mem_data$log_total_time~time_mem_data$log_ncell))[2], 3))))
p2 <- ggplot(time_mem_data, aes(log_ncell, log_peak_memory)) +
geom_point(size = 3) +
geom_smooth(data=subset(time_mem_data, log_ncell >= 5), method="lm") +
geom_smooth(data=subset(time_mem_data, log_ncell < 5), method="lm") +
labs(x = "log10 number of cells", y = "log10 peak memory usage (MB)") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black"),
legend.text=element_text(face="bold"),
legend.title=element_blank()) +
annotate("text",x=5.7,y=4,label=(paste("Slope =",round(coef(lm(time_mem_data$log_peak_memory[4:10]~time_mem_data$log_ncell[4:10]))[2], 3)))) +
annotate("text",x=4.3,y=4,label=(paste("Slope =",round(coef(lm(time_mem_data$log_peak_memory[1:3]~time_mem_data$log_ncell[1:3]))[2], 3))))
p3 <- ggarrange(p1, p2, nrow = 1,
labels = "auto")
ggsave("../../Supp_Fig5.jpeg", width = 8, height = 3,
units = "in", device='jpeg', dpi=600)
# Supp Fig 6
setwd("../../Numerical/SD1/data")
cluster_setting <- c("_cluster_seurat_k.rds", "_cluster_seurat_d.rds",
"_cluster_louvain_k.rds", "_cluster_louvain_d.rds",
"_cluster_cidr_k.rds", "_cluster_cidr_d.rds")
res <- matrix(0, 100, 6)
for (i in 1:100){
for (j in 1:6){
group <- readRDS(paste(i, cluster_setting[j], sep = ""))
res[i, j] <- adjustedRandIndex(group, rep(1:3, c(100, 4900, 1000)))
}
}
colnames(res) <- c("Seurat_N", "Seurat_D",
"Louvain_N", "Louvain_D",
"CIDR_N", "CIDR_D")
res <- data.frame(res)
plotdata <- pivot_longer(res, c("Seurat_N", "Seurat_D",
"Louvain_N", "Louvain_D",
"CIDR_N", "CIDR_D"))
colnames(plotdata) <- c("Setting", "ARI")
plotdata$Method <- rep(c("Seurat", "Seurat",
"Simple Louvain", "Simple Louvain",
"CIDR", "CIDR"), 100)
plotdata$Method <- factor(plotdata$Method, levels = c("Seurat", "Simple Louvain", "CIDR"))
plotdata$Setting <- factor(plotdata$Setting,
levels = c("Seurat_N", "Seurat_D",
"Louvain_N", "Louvain_D",
"CIDR_N", "CIDR_D"),
labels = c("Seurat_ON", "Seurat_TS",
"Louvain_ON", "Louvain_TS",
"CIDR_ON", "CIDR_TS"))
library(ggplot2)
ggplot(plotdata, aes(x=Setting, y=ARI, fill = Method)) +
geom_boxplot() + theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("ARI") + xlab("") +
theme(axis.text=element_text(size=12,face="bold"),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=12,face="bold"),
legend.title=element_text(size=14,face="bold"))
ggsave("../../../Supp_Fig6.jpeg", width = 4, height = 3,
units = "in", device='jpeg', dpi=600)
# Supp Fig 7
setwd("../../SD2")
so <- readRDS("so.rds")
coexp <- so@coexp
rm(so)
a <- c(coexp[1:60, 1:60][upper.tri(coexp[1:60, 1:60])],
coexp[41:100, 41:100][upper.tri(coexp[41:100, 41:100])],
coexp[81:140, 81:140][upper.tri(coexp[81:140, 81:140])],
coexp[121:180, 121:180][upper.tri(coexp[121:180, 121:180])],
coexp[161:220, 161:220][upper.tri(coexp[161:220, 161:220])])
b <- c(coexp[1:40, 61:80], coexp[1:40, 101:120], coexp[1:40, 141:160], coexp[1:40, 181:200],
coexp[61:80, 101:120], coexp[61:80, 141:160], coexp[61:80, 181:200],
coexp[101:120, 141:160], coexp[101:120, 181:200], coexp[141:160, 181:200])
d <- c(coexp[1:220, 221:ncol(coexp)])
e <- c(coexp[221:ncol(coexp), 221:ncol(coexp)][upper.tri(coexp[221:ncol(coexp), 221:ncol(coexp)])])
da <- density(a)
db <- density(b)
dd <- density(d)
de <- density(e)
refx <- seq(-5, 5, length.out = length(de$x))
refy <- dnorm(refx)
plotx <- c(da$x, db$x, dd$x, de$x, refx)
ploty <- c(da$y, db$y, dd$y, de$y, refy)
label <- rep(c("Same", "Different", "One", "None", "Reference"),
c(length(da$x), length(db$x), length(dd$x), length(de$x), length(de$x)))
label <- factor(label, levels = c("Same", "Different", "One", "None", "Reference"))
plotdata <- data.frame(plotx, ploty, label)
plotdata <- plotdata[abs(plotdata$plotx) <= 10, ]
ggplot(plotdata, aes(plotx, ploty, color = label)) +
geom_line(size = 2, alpha = 0.5) + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank()) +
labs(x = "Coexpression", y = "Density") +
scale_color_manual(values = c("yellow", "green", "red", "blue", "gray")) +
guides(fill=guide_legend(title="Coexpression type"))
ggsave("../../Supp_Fig7.jpeg", width = 4, height = 3,
units = "in", device='jpeg', dpi=600)
